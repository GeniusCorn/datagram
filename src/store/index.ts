import { defineStore } from 'pinia'
import { Rect } from '@/types/Rect'
import { v4 } from 'uuid'
import type { CptName } from '@/types/Element'

interface Drag {
  x: number
  y: number
  width: number
  height: number
  isActive: boolean
}

interface Cpt {
  type: CptName
  options: any
  data: any
}

export interface Element {
  id: string
  drag: Drag
  cpt: Cpt
}

export const useDataStore = defineStore('data', () => {
  let currentElement: number = $ref(-1)

  const elementsList: Element[] = $ref([])

  function addElement(cptType: CptName): void {
    const drag: Drag = {
      x: 40,
      y: 40,
      width: 200,
      height: 200,
      isActive: false
    }

    const cpt: Cpt = {
      type: cptType,
      options: {},
      data: {}
    }

    elementsList.push({
      // The id is generated by uuid to ensure uniqueness, and it is used as the id for v-for loops.
      id: v4(),
      drag,
      cpt
    })
  }

  function removeElement(index: number): void {
    elementsList.splice(index, 1)

    unsetElementActive()

    currentElement = -1
  }

  function changeElementSize(newRect: Rect, index: number): void {
    elementsList[index].drag.width = newRect.width
    elementsList[index].drag.height = newRect.height
  }

  function changeElementPosition(newRect: Rect, index: number): void {
    elementsList[index].drag.x = newRect.left
    elementsList[index].drag.y = newRect.top
  }

  function setElementActive(index: number): void {
    elementsList.forEach((element) => {
      element.drag.isActive = false
    })

    elementsList[index].drag.isActive = true
    currentElement = index
  }

  function unsetElementActive(): void {
    elementsList.forEach((element) => {
      element.drag.isActive = false
    })
  }

  return $$({
    currentElement,
    elementsList,
    addElement,
    removeElement,
    changeElementSize,
    changeElementPosition,
    setElementActive,
    unsetElementActive
  })
})
